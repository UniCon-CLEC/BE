// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseStatus {
  FUNDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum EnrollmentType {
  FUNDING
  PURCHASE
}

enum EnrollmentStatus {
  PLEDGED
  PAID
  PAYMENT_FAILED
  CANCELED
}

model User {
  id              String         @id @default(uuid()) @db.Uuid
  name            String?
  profileImageUrl String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tags            Tag[]    @relation("UserTags")

  enrollments     Enrollment[]
  reviews         CourseReview[]
}

model Instructor {
  id          String   @id @default(uuid()) @db.Uuid
  image       String?
  information String?
  schedule    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]
  notices InstructorNotice[]
}

model Course {
  id                        String       @id @default(uuid()) @db.Uuid
  title                     String
  status                    CourseStatus @default(FUNDING)
  fundingTargetAmount       Decimal
  fundingStartDate          DateTime 
  fundingEndDate            DateTime 
  courseStartDate           DateTime
  postFundingPrice          Decimal? // 펀딩 종료 후 판매 가격
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt

  instructorId String   @db.Uuid
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  introduction CourseIntroduction?
  sessions     CourseSession[]
  notices      CourseNotice[]
  fundingTiers FundingTier[]
  enrollments  Enrollment[]
  reviews      CourseReview[]
  tags         Tag[]       @relation("CourseTags")
}

model Tag {
  id        Int    @id @default(autoincrement())
  name      String @unique

  parentId  Int?
  parent    Tag?     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Tag[]    @relation("ParentChild")

  courses   Course[] @relation("CourseTags")
  users     User[]   @relation("UserTags")
}

model CourseIntroduction {
  id                    Int     @id @default(autoincrement())
  coverImageUrl         String
  description           String
  scheduleDetails       String

  courseId String @unique @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseSession {
  id             Int      @id @default(autoincrement())
  sessionNumber  Int
  title          String
  content        String?
  materials      String?
  createdAt      DateTime @default(now())

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseNotice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FundingTier {
  id                 Int      @id @default(autoincrement())
  price              Decimal
  benefitDescription String
  createdAt          DateTime @default(now())

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  enrollments Enrollment[]
}

model Enrollment {
  id           Int           @id @default(autoincrement())
  amountPaid   Decimal
  createdAt    DateTime      @default(now())
  status       EnrollmentStatus
  type         EnrollmentType

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id])

  fundingTierId Int?
  fundingTier   FundingTier? @relation(fields: [fundingTierId], references: [id])

  @@unique([userId, courseId])
}

model CourseReview {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model InstructorNotice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructorId String     @db.Uuid
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
}
