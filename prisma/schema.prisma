generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  TRACK
  CREW
  FUNDING
}

enum FundingStatus {
  FUNDING
  PREPARING
  ACTIVE
  COMPLETED
  CANCELED
}

enum CourseLifecycleStatus {
  PREPARING
  ACTIVE
  COMPLETED
  CANCELED
}

enum EnrollmentStatus {
  PLEDGED
  PAID
  PAYMENT_FAILED
  CANCELED
}

model User {
  id               String         @id @default(uuid()) @db.Uuid
  name             String?
  profileImageUrl  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tags             Tag[]    @relation("UserTags")

  trackEnrollments TrackEnrollment[]
  crewEnrollments  CrewEnrollment[]
  fundingEnrollments FundingEnrollment[]
  reviews          CourseReview[]
  Survey           Survey[]
}

model Instructor {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  image       String?
  information String?
  schedule    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courses Course[]
  notices InstructorNotice[]
}

model Course {
  id                        String       @id @default(uuid()) @db.Uuid
  type                      CourseType
  title                     String
  courseStartDate           DateTime
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt

  instructorId              String       @db.Uuid
  instructor                Instructor   @relation(fields: [instructorId], references: [id])

  track                     Track?
  crew                      Crew?
  funding                   Funding?

  introduction              CourseIntroduction?
  sessions                  CourseSession[]
  notices                   CourseNotice[]
  reviews                   CourseReview[]
  tags                      Tag[]       @relation("CourseTags")
}

model Funding {
  id                        Int              @id @default(autoincrement())
  status                    FundingStatus
  
  fundingTargetAmount       Decimal
  fundingStartDate          DateTime
  fundingEndDate            DateTime
  postFundingPrice          Decimal?
  fundingTiers              FundingTier[]
  enrollments               FundingEnrollment[]

  courseId                  String @unique @db.Uuid
  course                    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Track {
  id          Int                   @id @default(autoincrement())
  status      CourseLifecycleStatus

  courseId    String                @unique @db.Uuid
  course      Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)

  tiers       TrackTier[]
  enrollments TrackEnrollment[]
}

model Crew {
  id                        Int              @id @default(autoincrement())
  status                    CourseLifecycleStatus
  price                     Decimal
  courseId                  String @unique @db.Uuid
  course                    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollments               CrewEnrollment[]
}

model Tag {
  id        Int    @id @default(autoincrement())
  name      String @unique

  parentId  Int?
  parent    Tag?     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Tag[]    @relation("ParentChild")

  courses   Course[] @relation("CourseTags")
  users     User[]   @relation("UserTags")
  surveys   Survey[] @relation("SurveyTags")
}

model FundingEnrollment {
  id            Int              @id @default(autoincrement())
  amountPaid    Decimal
  createdAt     DateTime         @default(now())
  status        EnrollmentStatus
  userId        String           @db.Uuid
  user          User             @relation(fields: [userId], references: [id])
  fundingId     Int
  funding       Funding          @relation(fields: [fundingId], references: [id])
  fundingTierId Int
  fundingTier   FundingTier      @relation(fields: [fundingTierId], references: [id])
  @@unique([userId, fundingId])
}

model CrewEnrollment {
  id         Int              @id @default(autoincrement())
  amountPaid Decimal
  createdAt  DateTime         @default(now())
  status     EnrollmentStatus
  userId     String           @db.Uuid
  user       User             @relation(fields: [userId], references: [id])
  crewId     Int
  crew       Crew             @relation(fields: [crewId], references: [id])
  @@unique([userId, crewId])
}

model TrackEnrollment {
  id          Int              @id @default(autoincrement())
  amountPaid  Decimal
  createdAt   DateTime         @default(now())
  status      EnrollmentStatus
  userId      String           @db.Uuid
  user        User             @relation(fields: [userId], references: [id])
  trackId     Int
  track       Track            @relation(fields: [trackId], references: [id])
  trackTierId Int
  trackTier   TrackTier        @relation(fields: [trackTierId], references: [id])
  @@unique([userId, trackId])
}

model CourseIntroduction {
  id                    Int     @id @default(autoincrement())
  coverImageUrl         String
  description           String
  scheduleDetails       String

  courseId String @unique @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseSession {
  id             Int      @id @default(autoincrement())
  sessionNumber  Int
  title          String
  content        String?
  materials      String?
  createdAt      DateTime @default(now())

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseNotice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FundingTier {
  id                 Int               @id @default(autoincrement())
  price              Decimal
  benefitDescription String
  createdAt          DateTime          @default(now())
  fundingId          Int
  funding            Funding           @relation(fields: [fundingId], references: [id], onDelete: Cascade)
  enrollments        FundingEnrollment[]
}

model TrackTier {
  id                 Int             @id @default(autoincrement())
  price              Decimal
  benefitDescription String
  createdAt          DateTime        @default(now())
  trackId            Int
  track              Track           @relation(fields: [trackId], references: [id], onDelete: Cascade)
  enrollments        TrackEnrollment[]
}

model CourseReview {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model InstructorNotice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructorId String     @db.Uuid
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
}

enum SurveyType {
  TRACK_TOPIC
  CREW_TOPIC
}

model Survey {
  id              String        @id @default(uuid()) @db.Uuid
  type            SurveyType

  title           String
  content         String
  
  userId          String        @db.Uuid
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  recommendUsers  String[]
  tags            Tag[]      @relation("SurveyTags")
}